
//---------------------------------------------------------------------------

// This software is Copyright (c) 2011 Embarcadero Technologies, Inc. 
// You may only use this software if you are an authorized licensee
// of Delphi, C++Builder or RAD Studio (Embarcadero Products).
// This software is considered a Redistributable as defined under
// the software license agreement that comes with the Embarcadero Products
// and is subject to that software license agreement.

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "MeteorMainForm.h"
const int METEOR_COUNT = 8;
//const char IniFilename[] = "METEOR.INI";
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TMainForm *MainForm;

void __fastcall TMainForm::InitGameSettings()
{
  gwidth = 600;
  //GetPrivateProfileInt( "Display", "Width", 600, IniFilename );
  gheight = 400;
  //GetPrivateProfileInt( "Display", "Height", 400, IniFilename );
  ClientHeight = gheight;
  ClientWidth  = gwidth;

  for (int i=0;i<METEOR_COUNT;i++)
    sprites.Add( new Meteor( TPoint( random(gwidth), random(gheight) ),
                                         TLSize( random(5)-3, random(5)-3 ),3, 3 ) );
  ship = new Ship( TPoint( gwidth/2, gheight/2 ) );
  scoreDisplay = new SprMessage(TPoint(5,5),25);
  scoreDisplay->SetText("");
  sprites.Add( ship );
  sprites.Add( scoreDisplay );
  rotateLeft = rotateRight = thrust = fire = false;
}



void __fastcall TMainForm::InitGameGraphics()
 {
    // set the pen color to green, and the textbackground color to black
    PaintBox1->Canvas->Pen->Color =  clGreen;
    PaintBox1->Canvas->Brush->Color =  clBlack;

    // initialize a timer to run the game

    shotDelay = shotDelayReset = 5;

    score=0;
    shipsLeft=4;
    gameOver=false;
    newShipCountdown=0;
    SpeedyClientRect = ClientRect;
}

//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
    : TForm(Owner)
{
}

void __fastcall TMainForm::DrawGameObjects()
{
  char temp[20];
  int points;

  // ExtTextOut is faster than using FillRect
  PaintBox1->Canvas->FillRect(SpeedyClientRect);


  // draw all the sprites to the memory DC, then update them all
  sprites.DrawAll( PaintBox1->Canvas );

  // UpdateAll returns the number of points generated by bullets hitting
  // meteors.  If it returns a negative number, it means the ship was hit

  points = sprites.UpdateAll();

  if (points < 0)
  {  // ship was hit
    ship->Explode();
    ship = 0;
    points = 0;
    newShipCountdown = 50;
    shipsLeft--;
    if (shipsLeft <= 0)
        gameOver = true;
  }


  // if the ship was destroyed, adjust countdown to new ship

  if (newShipCountdown)
  {
    newShipCountdown--;
    if (newShipCountdown==0) {
      TPoint aPoint =  TPoint( gwidth/2, gheight/2 );
      ship = new Ship(aPoint);
      sprites.Add( ship );
    }
  }

  // depending on what keys the user has pressed, adjust the
  // ship position/thrust/etc

  if (ship) {
    if (rotateLeft) ship->Rotate( 15 );
    if (rotateRight) ship->Rotate( -15 );

    if (thrust)
      ship->AddThrust( +1 );
    else
      ship->AddThrust( -1 );

    // if the user is holding the spacebar, countdown to the next
    // shot

    if ((fire)&&(!shotDelay)) {
        sprites.Add( ship->CreateNewShot() );
        shotDelay = shotDelayReset;
    }
    if (shotDelay)
        shotDelay--;
  }

  // update the score display

  if (points)
  {
    score+=points;
    System::AnsiString temp;
    temp.sprintf("%8ld %s", score, System::AnsiString::StringOfChar('*', shipsLeft).c_str());
    scoreDisplay->SetText(temp.c_str());
  }
}


//---------------------------------------------------------------------------

void __fastcall TMainForm::FormKeyDown(TObject *Sender, WORD &Key, TShiftState Shift)

{
  switch (Key) {
    case VK_LEFT:
      rotateLeft = true;
      break;
    case VK_UP:
      thrust = true;
      break;
    case VK_RIGHT:
      rotateRight = true;
      break;
    case VK_SPACE:
      fire = true;
      break;
  }
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::FormKeyUp(TObject *Sender, WORD &Key, TShiftState Shift)
{
  switch (Key) {
    case VK_LEFT:
      rotateLeft = false;
      break;
    case VK_UP:
      thrust = false;
      break;
    case VK_RIGHT:
      rotateRight = false;
      break;
    case VK_SPACE:
      fire = false;
      shotDelay = 0;
      break;
  }
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::FormCreate(TObject *Sender)
{
    InitGameSettings();
    InitGameGraphics();
    DoubleBuffered = true;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::PaintBox1Paint(TObject *Sender)
{
   DrawGameObjects();
}
//---------------------------------------------------------------------------

// Timer -- this is the heart of the game.  Every timer tick, we update
// all the sprites on the screen, check for collisions, and redraw everything
//
void __fastcall TMainForm::Timer1Timer(TObject *Sender)
{
    PaintBox1->Invalidate();
}
//---------------------------------------------------------------------------

