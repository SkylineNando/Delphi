unit TestDSClientProxy;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses TestFramework, DBXJSONReflect, DBXJSON, DSClientProxy, SqlExpr, Classes,
  SysUtils, Customer, DBXCommon, DB, DBXDBReaders, TestDM, XMLIntf,
  TestCaseHelper, TestConsts, XMLHelpers;

type
  // Test methods for class TUserClient

  TestTUserClient = class(TTestCase)
  strict private
    FUserClient: TUserClient;
  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    procedure TestAddUser;
    procedure TestIsValidUser;
    procedure TestDisableUser;
    procedure TestEnableUser;
  end;

  // Test methods for class TDSServerMethodsClient

  TestTDSServerMethodsClient = class(TTestCase)
  strict private
    FDSServerMethodsClient: TDSServerMethodsClient;

  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    procedure TestGetServerDateTime;
    procedure TestExecuteJob;
    procedure TestMVPCustomer;
    procedure TestListofCustomer;
    procedure TestListofDifferentTypes;
  end;
  // Test methods for class TDMMainServerModuleClient

  TestTDMMainServerModuleClient = class(TTestCase)
  strict private
    FDMMainServerModuleClient: TDMMainServerModuleClient;

  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    procedure TestIpAddress;
    procedure TestServerComputerName;
  end;

  // Test methods for class TDepartmentClient
  TestTDepartmentClient = class(TTestCase)
  strict private
    FDepartmentClient: TDepartmentClient;

  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    procedure TestDepartmentDefault;
    procedure TestDepartmentOrderByID;
    procedure TestDepartmentOrderByName;
    procedure TestGetDepartments;
    procedure TestInsert;
  end;

  // Test methods for class TDSServerBatchClient


  TDSCallbackMethod = reference to function(const Args: TJSONValue): TJSONValue;
  TMessageCallback = class(TDBXCallback)
  private
    FCallBackMethod: TDSCallbackMethod;

  public
    constructor Create(CallBackMethod: TDSCallbackMethod);
    function Execute(const Arg: TJSONValue): TJSONValue; override;
  end;

  TestTDSServerBatchClient = class(TTestCase)
  strict private
    FDSServerBatchClient: TDSServerBatchClient;

  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    procedure TestStartBackup;
  end;


var
  FConnection: TDBXConnection;

implementation

procedure TestTUserClient.SetUp;
begin
  DMTest := TDMTest.Create(nil);
  LoadXML(DMTest.XMLDoc);

  GetConnection(FConnection);
  FUserClient := TUserClient.Create(FConnection);
end;

procedure TestTUserClient.TearDown;
begin
  FreeAndNil(DMTest);
  FConnection.Close;
  FreeAndNil(FConnection);

  FUserClient.Free;
  FUserClient := nil;
end;

procedure TestTUserClient.TestAddUser;
var
  Password: string;
  Login: string;
  FirstLastName: string;
  cItem, i: Integer;
  ItemNode: IXMLNode;
begin

  With DMTest do
  begin

    ItemNode := XMLDoc.FindTestNode(FUserClient.ClassName, 'UserData');

    for i := 1 to 5 do
    begin
    sleep(500);

    end;

    if Assigned(ItemNode) then
    begin

      cItem := ItemNode.childNodes.Count;

      for i := 0 to cItem - 1 do
      begin

        FirstLastName := GetNodeAsString(ItemNode.childNodes[i],
          'firstlastname');
        Login := GetNodeAsString(ItemNode.childNodes[i], 'login');
        Password := GetNodeAsString(ItemNode.childNodes[i], 'password');

        // TODO: Setup method call parameters
        FUserClient.AddUser(FirstLastName, Login, Password);

      end;
    end
    else
      Fail(NodeNotFound(FUserClient.ClassName));

  end;

end;

procedure TestTUserClient.TestIsValidUser;
var
  Expected,
  ReturnValue: Boolean;
  Password: string;
  Login: string;
  cItem, i: Integer;
  ItemNode: IXMLNode;
begin

  With DMTest do
  begin

    ItemNode := XMLDoc.FindTestNode(FUserClient.ClassName, 'UserData');

    if Assigned(ItemNode) then
    begin

      cItem := ItemNode.childNodes.Count;

      for i := 0 to cItem - 1 do
      begin

        Login := GetNodeAsString(ItemNode.childNodes[i], 'login');
        Password := GetNodeAsString(ItemNode.childNodes[i], 'password');
        Expected := GetNodeAsBoolean(ItemNode.childNodes[i], 'expected');

        // TODO: Setup method call parameters
        ReturnValue := FUserClient.IsValidUser(Login, Password);

        // TODO: Validate method results
        CheckEquals(Expected, ReturnValue,
          'Need to verify method IsValidUser ' + FormatDescription
            (ItemNode.childNodes[i]));

      end;
    end
    else
      Fail(NodeNotFound(FUserClient.ClassName));

  end;

end;

procedure TestTUserClient.TestDisableUser;
var
  Login, Password : string;
  ReturnValue, Expected : Boolean;
  CItem, I: Integer;
  ItemNode: IXMLNode;
begin

  With DMTest do
  begin

    ItemNode := XMLDoc.FindTestNode(FUserClient.ClassName, 'UserData');

    if Assigned(ItemNode) then
    begin

      CItem := ItemNode.childNodes.Count;

      for I := 0 to CItem - 1 do
      begin

        Login := GetNodeAsString(ItemNode.childNodes[I], 'login');
        Password := GetNodeAsString(ItemNode.childNodes[I], 'password');
        Expected := GetNodeAsBoolean(ItemNode.childNodes[I], 'expectedDisable');

        // TODO: Setup method call parameters
        FUserClient.DisableUser(Login);
        ReturnValue := FUserClient.IsValidUser(Login, Password);

        // TODO: Validate method results
        CheckEquals(Expected, ReturnValue,
          'Need to verify method DisableUser ' + FormatDescription
            (ItemNode.childNodes[I]));

      end;
    end
    else
      Fail(NodeNotFound(FUserClient.ClassName));

  end;

end;

procedure TestTUserClient.TestEnableUser;
var
  Login, Password : string;
  ReturnValue, Expected : Boolean;
  CItem, I: Integer;
  ItemNode: IXMLNode;
begin

  With DMTest do
  begin

    ItemNode := XMLDoc.FindTestNode(FUserClient.ClassName, 'UserData');

    if Assigned(ItemNode) then
    begin

      CItem := ItemNode.childNodes.Count;

      for I := 0 to CItem - 1 do
      begin

        Login := GetNodeAsString(ItemNode.childNodes[I], 'login');
        Password := GetNodeAsString(ItemNode.childNodes[I], 'password');
        Expected := GetNodeAsBoolean(ItemNode.childNodes[I], 'expectedEnable');

        // TODO: Setup method call parameters
        FUserClient.EnableUser(Login);
        ReturnValue := FUserClient.IsValidUser(Login, Password);

        // TODO: Validate method results
        CheckEquals(Expected, ReturnValue,
          'Need to verify method DisableUser ' + FormatDescription
            (ItemNode.childNodes[I]));

      end;
    end
    else
      Fail(NodeNotFound(FUserClient.ClassName));

  end;

end;

procedure TestTDSServerMethodsClient.SetUp;
begin
  GetConnection(FConnection);
  FDSServerMethodsClient := TDSServerMethodsClient.Create(FConnection);
end;

procedure TestTDSServerMethodsClient.TearDown;
begin
  FDSServerMethodsClient.Free;
  FDSServerMethodsClient := nil;
end;

procedure TestTDSServerMethodsClient.TestGetServerDateTime;
var
  ReturnValue: TDateTime;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDSServerMethodsClient.GetServerDateTime;

  // TODO: Validate method results
  Check(ReturnValue > 0,'Need to verify method GetServerDateTime ');
end;

procedure TestTDSServerMethodsClient.TestExecuteJob;
var
  JobId: Integer;
begin
  JobId := 1;
  // TODO: Setup method call parameters
  FDSServerMethodsClient.ExecuteJob(JobId);

end;

procedure TestTDSServerMethodsClient.TestMVPCustomer;
var
  ReturnValue: TJSONValue;
begin

  // TODO: Setup method call parameters
  ReturnValue := FDSServerMethodsClient.MVPCustomer;

  // TODO: Validate method results
  CheckNotNull(ReturnValue, 'Need to verify method MVPCustomer');

end;

procedure TestTDSServerMethodsClient.TestListofCustomer;
var
  ReturnValue: TJSONArray;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDSServerMethodsClient.ListofCustomer;

  // TODO: Validate method results
  CheckTrue(Assigned(ReturnValue), 'Need to verify method ListofCustomer');
end;

procedure TestTDSServerMethodsClient.TestListofDifferentTypes;
var
  ReturnValue: TJSONArray;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDSServerMethodsClient.ListofDifferentTypes;

  // TODO: Validate method results
  CheckTrue(Assigned(ReturnValue), 'Need to verify method ListofDifferentTypes');
end;

procedure TestTDMMainServerModuleClient.SetUp;
begin
  GetConnection(FConnection);
  FDMMainServerModuleClient := TDMMainServerModuleClient.Create(FConnection);
end;

procedure TestTDMMainServerModuleClient.TearDown;
begin
  FDMMainServerModuleClient.Free;
  FDMMainServerModuleClient := nil;
end;

procedure TestTDMMainServerModuleClient.TestIpAddress;
var
  ReturnValue: string;
begin
  ReturnValue := FDMMainServerModuleClient.IpAddress;
  // TODO: Validate method results
end;

procedure TestTDMMainServerModuleClient.TestServerComputerName;
var
  ReturnValue: string;
begin
  ReturnValue := FDMMainServerModuleClient.ServerComputerName;
  // TODO: Validate method results
end;

procedure TestTDepartmentClient.SetUp;
begin
  GetConnection(FConnection);
  FDepartmentClient := TDepartmentClient.Create(FConnection);
end;

procedure TestTDepartmentClient.TearDown;
begin
  FDepartmentClient.Free;
  FDepartmentClient := nil;
end;

procedure TestTDepartmentClient.TestDepartmentDefault;
var
  ReturnValue: TDBXReader;
begin
  FDepartmentClient.DepartmentDefault;
  ReturnValue := FDepartmentClient.GetDepartments;

  // TODO: Validate method results
  CheckNotNull(ReturnValue, 'Need to verify method DepartmentDefault');
end;

procedure TestTDepartmentClient.TestDepartmentOrderByID;
var
  ReturnValue: TDBXReader;
begin
  FDepartmentClient.DepartmentOrderByID;
  ReturnValue := FDepartmentClient.GetDepartmentsOrderBy;

  // TODO: Validate method results
  CheckNotNull(ReturnValue, 'Need to verify method DepartmentOrderByID');
end;

procedure TestTDepartmentClient.TestDepartmentOrderByName;
var
  ReturnValue: TDBXReader;
begin
  FDepartmentClient.DepartmentOrderByName;
  ReturnValue := FDepartmentClient.GetDepartmentsOrderBy;

  // TODO: Validate method results
  CheckNotNull(ReturnValue, 'Need to verify method DepartmentOrderByName');
end;

procedure TestTDepartmentClient.TestGetDepartments;
var
  ReturnValue: TDBXReader;
begin
  ReturnValue := FDepartmentClient.GetDepartments;

  // TODO: Validate method results
  CheckNotNull(ReturnValue, 'Need to verify method DepartmentDefault');
end;

procedure TestTDepartmentClient.TestInsert;
var
  ReturnValue: Boolean;
  sParams: TParams;
begin
  sParams := TParams.Create;
  sParams.CreateParam(ftString, 'DEPARTMENT', ptInput).Value := 'New Department';
  sParams.CreateParam(ftString, 'HEAD_DEPT', ptInput).Value := '000';
  sParams.CreateParam(ftString, 'MNGR_NO', ptInput).Value := '105';
  sParams.CreateParam(ftString, 'BUDGET', ptInput).Value := 100000;
  sParams.CreateParam(ftString, 'LOCATION', ptInput).Value := 'Scotts Valley';
  sParams.CreateParam(ftString, 'PHONE_NO', ptInput).Value := 'N/A';

  // TODO: Setup method call parameters
  ReturnValue := FDepartmentClient.Insert(sParams);

  // TODO: Validate method results
  CheckEquals(True, ReturnValue, 'Need to verify method Insert');
end;


procedure TestTDSServerBatchClient.SetUp;
begin
  GetConnection(FConnection);
  FDSServerBatchClient := TDSServerBatchClient.Create(FConnection);
end;

procedure TestTDSServerBatchClient.TearDown;
begin
  FDSServerBatchClient.Free;
  FDSServerBatchClient := nil;
end;

procedure TestTDSServerBatchClient.TestStartBackup;
var
  Status : string;
  sMessage: TDBXCallback;
begin

  sMessage := TMessageCallback.Create( function(const Args: TJSONValue)
      : TJSONValue

      var
        LJSONObject: TJSONObject;
        i: Integer;
      begin
        // Extract information about the transformation from Json
        LJSONObject := TJSONObject(Args);
        Result := nil;

        for i := 0 to LJSONObject.Size - 1 do
        begin
          Status := LJSONObject.Get(i).JsonValue.Value;
          Result := TJSONTrue.Create;
        end;
    end);

  // TODO: Setup method call parameters
  FDSServerBatchClient.StartBackup(sMessage, 'mybackup.ibk'); //sBackupFileName);
  while Status <> 'Done' do
  begin
    Sleep(1000);
  end;

  // TODO: Validate method results
  CheckTrue(Status = 'Done', 'Backup error');

end;

{ TMessageCallback }

constructor TMessageCallback.Create(CallBackMethod: TDSCallbackMethod);
begin
  FCallBackMethod := CallBackMethod;
end;

function TMessageCallback.Execute(const Arg: TJSONValue): TJSONValue;
begin
  Result := FCallBackMethod(Arg);
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTUserClient.Suite);
RegisterTest(TestTDSServerMethodsClient.Suite);
RegisterTest(TestTDMMainServerModuleClient.Suite);
RegisterTest(TestTDepartmentClient.Suite);
RegisterTest(TestTDSServerBatchClient.Suite);

end.
